{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Big Honking Button User Guide # Big Honking Button is, well, a big button that honks. Okay, that's not all- it\u2019s actually a simple sampler in a very silly package. It has pitch CV, gate in, gate out, and you can store up to 4mb of samples on it. Getting support and help # We want you to have a wonderful experience with your module. If you need help or run into problems, please reach out to us. Email is the best way for product issues, whereas Discord and GitHub are great for getting advice and help on how to customize your module. Send us an email . File a bug on GitHub Reach out on the Discord Installing the module # To install this into your Eurorack setup: Connect a Eurorack power cable to your power supply and the back of the module. Note that even though the power connector on the module is keyed, double check that the red stripe is on the side labeled red stripe ! Screw the module to your rack's rails. Inputs and outputs # Big Honking Button has two inputs: A gate / trigger in A pitch CV in that is 1v/Oct with a -2v to +2v range And two outputs: A gate / trigger out (0v or 5v) An audio out With the default code, it will trigger the sample and play it through the audio out whenever the button is pressed or whenever the gate input is triggered. It will also set the gate out to high whenever the button is pressed or whenever the gate in is high. You can customize some of this behavior by modifying the code . Changing the sample # You can change the sample on Big Honking Button by connecting it to your computer via a micro USB cable. The USB port is located on the module's main circuit board, located under the panel. Please note that you do have to power the module in order for the USB connection to work (the module itself can not be powered over USB alone). Samples must be in mono, 16-bit, 44.1kHz, signed wav files. Adafruit has an excellent guide on how to convert sound files , though your sample can be 44.1kHz and not 22kHz. To modify the sample that plays: Connect the Big Honking Button to your computer using a micro USB cable. It should show up as a small external drive named CIRCUITPY Navigate to the samples folder in the drive Rename or delete the existing honk.wav file Copy your sample over and rename it to honk.wav Your Big Honking Button will reboot and then it should play the new sample! If you run into trouble, please reach out . You can store and play multiple samples on the Big Honking Button, but to do that, you'll need to learn how to modify some of the code - don't worry! It's not too hard. Modifying the code # When connected to your computer, Big Honking Button shows up as a small drive named CIRCUITPY . In that drive, you should find a file named code.py . Big Honking Button runs CircuitPython which means that its firmware is written in the approachable Python programming language and you don't need any special knowledge or compilers to make changes to it. So, open up that file in your favorite text editor, we're going to make some changes! If you don't have a text editor - that's okay! While you could use Notepad (Windows) or TextEdit (Mac), these can sometimes have issues with CircuitPython devices like Big Honking Button. I'd recommend installing Mu if you're new to this whole world. You can read more about editing code for CircuitPython in Adafruit's guide . As a way to get your feet let's change how the Big Honking Button behaves. By default, when you press the button it plays the entire sample, even if you release the button while the sample is still playing (this is trigger mode ). This will make it where the sample will stop as soon as you let go of the button (or gate mode). In the code.py you should see some code that looks like this (it's at the bottom): if bhb . released : bhb . gate_out = False # Uncomment the call to stop to make the sample # stop playing as soon as you release the button. # bhb.stop() Modify this code so that it looks like this: if bhb . released : bhb . gate_out = False # Uncomment the call to stop to make the sample # stop playing as soon as you release the button. bhb . stop () Be careful Python is whitespace-sensitive . That means tabs and spaces are important! Make sure that you don't accidentally change the indentation level of this line. Okay, save the file! Your Big Honking Button should restart and now it should stop the sample as soon as you let go of the button, try pressing it rapidly to see the effect. Tip If things aren't working, see the section below on finding problems or reach out ! Congrats , you've made your first change to how the module works! \ud83c\udf89 Big Honking Button can store multiple samples and you can use various means to change how they're triggered. We'll be adding a sample showing just that soon, but don't be afraid to experiment and reach out if you need any help! If you want to you can learn more about CircuitPython to the most of your module. Also, please come chat on the Discord where you can ask questions and see what others are doing with their Big Honking Button! Examples # Big Honking Button can do all sorts of things! We've made a few examples to get you started. If you want to use these, copy their contents to code.py on the CIRCUITPY drive. Be sure to save it as the correct name, if you don't name it code.py it won't change anything. If you want to restore the original code.py it is here . Cycle example : Shows how to load multiple samples and cycle between them. Random example : Shows how to load multiple samples and choose one at random. Tap tempo example : Shows how to use the button to set the tempo and have the module play back a sample at each beat. Sine example : An advanced example that shows how to generate a custom waveform. Noise example : An advanced example that shows how to generate noise. Help! I changed some code and this thing isn't working! # There's probably some sort of error in the program. Don't worry, you can get it figured out. If you connect using the serial console you should be able to see the error. If you don't see it right away, you might need to reset the board (either by pressing the little button on the bottom of the module or power cycling your synth). Sometimes you can press Ctrl+C followed by Ctrl+D in the serial console to get the board to reset and tell you the error. In any case, reach out on Discord and we can walk you through figuring out what went wrong. Updating the firmware # Updating the firmware requires two steps: Updating CircuitPython and updating Big Honking Button's libraries. Updating CircuitPython Download the latest version of CircuitPython for Winterbloom Big Honking Button . Connect Big Honking Button to your computer via USB. The USB port is located underneath the panel. Note that you still have to power the module from a Eurorack power supply. Place Big Honking Button in bootloader mode by pressing the reset button twice quickly. The reset button is located on the bottom of the module just below the power connector. Once in bootloader mode, you should see a drive on your computer named HONKBOOT . Copy the uf2 file from step 1 to the HONKBOOT drive. The module should restart by itself. Updating Big Honking Button's libraries Download the latest release bundle for Big Honking Button . Unzip the release bundle, and then copy the contents to Big Honking Button's CIRCUITPY drive, replacing any existing files. Reboot Big Honking Button by power cycling your synthesizer or pressing the reset button again. Open source hardware & software # Big Honking Button is completely open source and hacking is encouraged. The firmware is available under the MIT License . The hardware design is available under the CC BY-SA 4.0 License and is designed using KiCAD which is free and open-source. You can open the hardware files using KiCAD or you can check out a PDF of the schematic . CircuitPython is available under the MIT License . Big Honking Button is certified open source hardware . Acknowledgments and thanks # Big Honking Button would not be possible without the help of the CircuitPython community and Adafruit Industries.","title":"User Guide"},{"location":"#big-honking-button-user-guide","text":"Big Honking Button is, well, a big button that honks. Okay, that's not all- it\u2019s actually a simple sampler in a very silly package. It has pitch CV, gate in, gate out, and you can store up to 4mb of samples on it.","title":"Big Honking Button User Guide"},{"location":"#getting-support-and-help","text":"We want you to have a wonderful experience with your module. If you need help or run into problems, please reach out to us. Email is the best way for product issues, whereas Discord and GitHub are great for getting advice and help on how to customize your module. Send us an email . File a bug on GitHub Reach out on the Discord","title":"Getting support and help"},{"location":"#installing-the-module","text":"To install this into your Eurorack setup: Connect a Eurorack power cable to your power supply and the back of the module. Note that even though the power connector on the module is keyed, double check that the red stripe is on the side labeled red stripe ! Screw the module to your rack's rails.","title":"Installing the module"},{"location":"#inputs-and-outputs","text":"Big Honking Button has two inputs: A gate / trigger in A pitch CV in that is 1v/Oct with a -2v to +2v range And two outputs: A gate / trigger out (0v or 5v) An audio out With the default code, it will trigger the sample and play it through the audio out whenever the button is pressed or whenever the gate input is triggered. It will also set the gate out to high whenever the button is pressed or whenever the gate in is high. You can customize some of this behavior by modifying the code .","title":"Inputs and outputs"},{"location":"#changing-the-sample","text":"You can change the sample on Big Honking Button by connecting it to your computer via a micro USB cable. The USB port is located on the module's main circuit board, located under the panel. Please note that you do have to power the module in order for the USB connection to work (the module itself can not be powered over USB alone). Samples must be in mono, 16-bit, 44.1kHz, signed wav files. Adafruit has an excellent guide on how to convert sound files , though your sample can be 44.1kHz and not 22kHz. To modify the sample that plays: Connect the Big Honking Button to your computer using a micro USB cable. It should show up as a small external drive named CIRCUITPY Navigate to the samples folder in the drive Rename or delete the existing honk.wav file Copy your sample over and rename it to honk.wav Your Big Honking Button will reboot and then it should play the new sample! If you run into trouble, please reach out . You can store and play multiple samples on the Big Honking Button, but to do that, you'll need to learn how to modify some of the code - don't worry! It's not too hard.","title":"Changing the sample"},{"location":"#modifying-the-code","text":"When connected to your computer, Big Honking Button shows up as a small drive named CIRCUITPY . In that drive, you should find a file named code.py . Big Honking Button runs CircuitPython which means that its firmware is written in the approachable Python programming language and you don't need any special knowledge or compilers to make changes to it. So, open up that file in your favorite text editor, we're going to make some changes! If you don't have a text editor - that's okay! While you could use Notepad (Windows) or TextEdit (Mac), these can sometimes have issues with CircuitPython devices like Big Honking Button. I'd recommend installing Mu if you're new to this whole world. You can read more about editing code for CircuitPython in Adafruit's guide . As a way to get your feet let's change how the Big Honking Button behaves. By default, when you press the button it plays the entire sample, even if you release the button while the sample is still playing (this is trigger mode ). This will make it where the sample will stop as soon as you let go of the button (or gate mode). In the code.py you should see some code that looks like this (it's at the bottom): if bhb . released : bhb . gate_out = False # Uncomment the call to stop to make the sample # stop playing as soon as you release the button. # bhb.stop() Modify this code so that it looks like this: if bhb . released : bhb . gate_out = False # Uncomment the call to stop to make the sample # stop playing as soon as you release the button. bhb . stop () Be careful Python is whitespace-sensitive . That means tabs and spaces are important! Make sure that you don't accidentally change the indentation level of this line. Okay, save the file! Your Big Honking Button should restart and now it should stop the sample as soon as you let go of the button, try pressing it rapidly to see the effect. Tip If things aren't working, see the section below on finding problems or reach out ! Congrats , you've made your first change to how the module works! \ud83c\udf89 Big Honking Button can store multiple samples and you can use various means to change how they're triggered. We'll be adding a sample showing just that soon, but don't be afraid to experiment and reach out if you need any help! If you want to you can learn more about CircuitPython to the most of your module. Also, please come chat on the Discord where you can ask questions and see what others are doing with their Big Honking Button!","title":"Modifying the code"},{"location":"#examples","text":"Big Honking Button can do all sorts of things! We've made a few examples to get you started. If you want to use these, copy their contents to code.py on the CIRCUITPY drive. Be sure to save it as the correct name, if you don't name it code.py it won't change anything. If you want to restore the original code.py it is here . Cycle example : Shows how to load multiple samples and cycle between them. Random example : Shows how to load multiple samples and choose one at random. Tap tempo example : Shows how to use the button to set the tempo and have the module play back a sample at each beat. Sine example : An advanced example that shows how to generate a custom waveform. Noise example : An advanced example that shows how to generate noise.","title":"Examples"},{"location":"#help-i-changed-some-code-and-this-thing-isnt-working","text":"There's probably some sort of error in the program. Don't worry, you can get it figured out. If you connect using the serial console you should be able to see the error. If you don't see it right away, you might need to reset the board (either by pressing the little button on the bottom of the module or power cycling your synth). Sometimes you can press Ctrl+C followed by Ctrl+D in the serial console to get the board to reset and tell you the error. In any case, reach out on Discord and we can walk you through figuring out what went wrong.","title":"Help! I changed some code and this thing isn't working!"},{"location":"#updating-the-firmware","text":"Updating the firmware requires two steps: Updating CircuitPython and updating Big Honking Button's libraries.","title":"Updating the firmware"},{"location":"#open-source-hardware-software","text":"Big Honking Button is completely open source and hacking is encouraged. The firmware is available under the MIT License . The hardware design is available under the CC BY-SA 4.0 License and is designed using KiCAD which is free and open-source. You can open the hardware files using KiCAD or you can check out a PDF of the schematic . CircuitPython is available under the MIT License . Big Honking Button is certified open source hardware .","title":"Open source hardware &amp; software"},{"location":"#acknowledgments-and-thanks","text":"Big Honking Button would not be possible without the help of the CircuitPython community and Adafruit Industries.","title":"Acknowledgments and thanks"},{"location":"build/","text":"Big Honking Button Kit Build Guide # Welcome to the build guide for the Big Honking Button! We hope you have a great time putting this module together and a wonderful time using it. Please read all instructions thoroughly before starting. If you have questions or run into trouble please reach out to us on discord or drop us an email at support@winterbloom.com This build is a beginner level kit. Some soldering experience is helpful but not required. If it's your first time soldering we recommend reading through Adafruit's guide to excellent soldering . This build takes around two hours to complete. Tools and materials required # Tools: A soldering iron, like this one A stiff brush. An old toothbrush will work great. (optional) A hot air station ( like this ). If you don't have one, have a lighter handy. Materials: Solder, we can recommend Adafruit's 60/40 rosin core solder . Isopropyl alcohol, 70% or higher. Kit contents # Your kit should contain the following items. If any are missing please email us at support@winterbloom.com . (1) Big Honking Button printed circuit board (PCB) (1) SANWA arcade button (1) Button wiring harness (purple with white connector) (2) Short pieces of heat-shrink tubing (1) 10-pin Eurorack power connector (black) (1) 2-pin JST connector (green) (4) 1/8\" jacks (4) Hex nuts for the 1/8\" jacks (1) Panel (1) Extra-special rubber band (not pictured) (1) Eurorack power cable (not pictured) (2) M3 screws for attaching the module to your rack (not pictured) Soldering the jacks # The first step is to solder the 1/8\" jacks on to the printed circuit board (PCB). Place the jacks onto the front side of the board. Note that this side has the outline of the jacks on it. Hold the jacks in place and carefully turn the board over. Double check and make sure the jacks are all flush with the PCB. Now you can solder each of the pins from the jacks to the board. There are three per jack for a total of twelve. Tip If you have some helping hands or a PCB clamp , you can place it in there. You just have to be careful to make sure that the jacks stay flush against the board. You can double-check after each solder joint and adjust them if necessary. Soldering the JST connector # Next you'll need to solder the green JST connector to the PCB. The JST connector goes on the back side of the board. Note the orientation of the connector. It shouldn't be overhanging the board, it should come right up to the edge. Just like with the 1/8\" jacks, flip the board over and solder the two pins of the JST connector to the board. Make sure the connector is flush with the board. You can use a piece of tape to hold it in place. Soldering the power connector # Next up is the 10-pin Eurorack power connector. The power connector also goes on the back side of the board. When placing note the notch in the outline on the board . You'll need to make sure the slot on the connector matches where the notch is on the outline . The slot should be facing the edge of the board. Once placed you can solder the 10 pins on the other side of the board. Be careful here and avoid touching the small components near the pins with your iron. Cleaning the board # At this point your board probably has some icky soldering residue on it. You can clean that using the isopropyl alcohol and the stiff brush. Just wet the brush a little with the alcohol and give the board a scrub. Do not use water, soap, or anything else to clean the board. Allow the board to dry completely before trying to use it. Soldering the wire harness to the button # Set the board aside for a moment. The next step is to attach the wire harness to the button. You'll need the button, wire harness, and the two small pieces of heat shrink tubing. Place the two pieces of heat-shrink tubing onto the two wires on the wire harness. Push them all the way to the white connector. Carefully solder one of the wires from the harness onto the lugs on the button. You may need to get a friend to hold the button for you. Make sure the heat-shrink tubing stay on the wire . Repeat for the other wire and lug. Once again, make sure that the heat-shrink tubing stays on the wire. Now you can push the heat-shrink tubing over the solder joints and the lugs to cover the connections. Using a hot air station (set to no higher than 150 degrees celsius) or a lighter (very carefully) apply heat to the heat-shrink tubing to shrink it over the lug. It will not completely shrink around the wire side so do not apply excess heat - you will melt the wire's sleeving. Putting it all together # All of the soldering is complete! You can put away the soldering iron. The next steps are putting it all together. First, place the button's wires through the large hole in front side of the panel. Push the button into the hole - it should snap into place. Flip the panel over so that you can see the back part of the button. Place the rubber band around the button. And then double up the rubber band around the button. Make sure the rubber band is as close to the panel as possible. This will hold the button snugly in place so that it doesn't wiggle when you use it. Now you can connect the button's white connector to the green JST header on the board. Place it so that the tab on the connector matches the notch in the header. One aligned, apply some pressure to snap the connector into the header. It will lock in place. Next, align the 1/8\" jacks on the board to the matching holes on the panel and push them through the panel. Grab the four hex nuts and tighten them around each 1/8\" jack, securing the panel to the board. All done # Congratulations! You've finished your Big Honking Button! Now that it's all put together go check out the User's Guide and please show us your work by tweeting at @wntrblm or tagging @wntrblm in your instagram post.","title":"Kit Build Instructions"},{"location":"build/#big-honking-button-kit-build-guide","text":"Welcome to the build guide for the Big Honking Button! We hope you have a great time putting this module together and a wonderful time using it. Please read all instructions thoroughly before starting. If you have questions or run into trouble please reach out to us on discord or drop us an email at support@winterbloom.com This build is a beginner level kit. Some soldering experience is helpful but not required. If it's your first time soldering we recommend reading through Adafruit's guide to excellent soldering . This build takes around two hours to complete.","title":"Big Honking Button Kit Build Guide"},{"location":"build/#tools-and-materials-required","text":"Tools: A soldering iron, like this one A stiff brush. An old toothbrush will work great. (optional) A hot air station ( like this ). If you don't have one, have a lighter handy. Materials: Solder, we can recommend Adafruit's 60/40 rosin core solder . Isopropyl alcohol, 70% or higher.","title":"Tools and materials required"},{"location":"build/#kit-contents","text":"Your kit should contain the following items. If any are missing please email us at support@winterbloom.com . (1) Big Honking Button printed circuit board (PCB) (1) SANWA arcade button (1) Button wiring harness (purple with white connector) (2) Short pieces of heat-shrink tubing (1) 10-pin Eurorack power connector (black) (1) 2-pin JST connector (green) (4) 1/8\" jacks (4) Hex nuts for the 1/8\" jacks (1) Panel (1) Extra-special rubber band (not pictured) (1) Eurorack power cable (not pictured) (2) M3 screws for attaching the module to your rack (not pictured)","title":"Kit contents"},{"location":"build/#soldering-the-jacks","text":"The first step is to solder the 1/8\" jacks on to the printed circuit board (PCB). Place the jacks onto the front side of the board. Note that this side has the outline of the jacks on it. Hold the jacks in place and carefully turn the board over. Double check and make sure the jacks are all flush with the PCB. Now you can solder each of the pins from the jacks to the board. There are three per jack for a total of twelve. Tip If you have some helping hands or a PCB clamp , you can place it in there. You just have to be careful to make sure that the jacks stay flush against the board. You can double-check after each solder joint and adjust them if necessary.","title":"Soldering the jacks"},{"location":"build/#soldering-the-jst-connector","text":"Next you'll need to solder the green JST connector to the PCB. The JST connector goes on the back side of the board. Note the orientation of the connector. It shouldn't be overhanging the board, it should come right up to the edge. Just like with the 1/8\" jacks, flip the board over and solder the two pins of the JST connector to the board. Make sure the connector is flush with the board. You can use a piece of tape to hold it in place.","title":"Soldering the JST connector"},{"location":"build/#soldering-the-power-connector","text":"Next up is the 10-pin Eurorack power connector. The power connector also goes on the back side of the board. When placing note the notch in the outline on the board . You'll need to make sure the slot on the connector matches where the notch is on the outline . The slot should be facing the edge of the board. Once placed you can solder the 10 pins on the other side of the board. Be careful here and avoid touching the small components near the pins with your iron.","title":"Soldering the power connector"},{"location":"build/#cleaning-the-board","text":"At this point your board probably has some icky soldering residue on it. You can clean that using the isopropyl alcohol and the stiff brush. Just wet the brush a little with the alcohol and give the board a scrub. Do not use water, soap, or anything else to clean the board. Allow the board to dry completely before trying to use it.","title":"Cleaning the board"},{"location":"build/#soldering-the-wire-harness-to-the-button","text":"Set the board aside for a moment. The next step is to attach the wire harness to the button. You'll need the button, wire harness, and the two small pieces of heat shrink tubing. Place the two pieces of heat-shrink tubing onto the two wires on the wire harness. Push them all the way to the white connector. Carefully solder one of the wires from the harness onto the lugs on the button. You may need to get a friend to hold the button for you. Make sure the heat-shrink tubing stay on the wire . Repeat for the other wire and lug. Once again, make sure that the heat-shrink tubing stays on the wire. Now you can push the heat-shrink tubing over the solder joints and the lugs to cover the connections. Using a hot air station (set to no higher than 150 degrees celsius) or a lighter (very carefully) apply heat to the heat-shrink tubing to shrink it over the lug. It will not completely shrink around the wire side so do not apply excess heat - you will melt the wire's sleeving.","title":"Soldering the wire harness to the button"},{"location":"build/#putting-it-all-together","text":"All of the soldering is complete! You can put away the soldering iron. The next steps are putting it all together. First, place the button's wires through the large hole in front side of the panel. Push the button into the hole - it should snap into place. Flip the panel over so that you can see the back part of the button. Place the rubber band around the button. And then double up the rubber band around the button. Make sure the rubber band is as close to the panel as possible. This will hold the button snugly in place so that it doesn't wiggle when you use it. Now you can connect the button's white connector to the green JST header on the board. Place it so that the tab on the connector matches the notch in the header. One aligned, apply some pressure to snap the connector into the header. It will lock in place. Next, align the 1/8\" jacks on the board to the matching holes on the panel and push them through the panel. Grab the four hex nuts and tighten them around each 1/8\" jack, securing the panel to the board.","title":"Putting it all together"},{"location":"build/#all-done","text":"Congratulations! You've finished your Big Honking Button! Now that it's all put together go check out the User's Guide and please show us your work by tweeting at @wntrblm or tagging @wntrblm in your instagram post.","title":"All done"}]}